// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeviceCode {
  id        String   @id @default(cuid())
  code      String   @unique
  claimed   Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
}

model User {
  id         String       @id @default(cuid())
  DeviceCode DeviceCode[]
  email      String       @unique
  name       String?
  createdAt  DateTime     @default(now())
}


model LiveStats {
  id                String   @id @default(cuid())
  tunnelId          String   @unique
  requestsLast5Min  Int      @default(0)
  requestsLast1Hour Int      @default(0)
  avgResponseTime   Float    @default(0)
  errorRate         Int      @default(0)
  lastUpdated       DateTime @default(now())

  @@map("live_stats")
}

model HourlyStats {
  id              String   @id @default(cuid())
  tunnelId        String
  hour            DateTime
  totalRequests   Int
  successRequests Int
  errorRequests   Int
  avgResponseTime Float
  totalBandwidth  BigInt
  uniqueIps       Int
  topPaths        Json
  topCountries    Json
  statusCodes     Json
  createdAt       DateTime @default(now())

  @@unique([tunnelId, hour], name: "tunnelId_hour")
  @@map("hourly_stats")
}

model DailyStats {
  id              String   @id @default(cuid())
  tunnelId        String
  date            DateTime
  totalRequests   Int
  successRequests Int
  errorRequests   Int
  avgResponseTime Float
  totalBandwidth  BigInt
  uniqueIps       Int
  peakHour        Int
  createdAt       DateTime @default(now())

  @@unique([tunnelId, date], name: "tunnelId_date")
  @@map("daily_stats")
}

model RequestLog {
  id           String   @id @default(cuid())
  tunnelId     String
  path         String
  method       String
  statusCode   Int
  responseTime Int
  requestSize  Int
  responseSize Int
  clientIp     String
  country      String?
  userAgent    String?
  timestamp    DateTime @default(now())

  @@index([tunnelId, timestamp])
  @@map("request_logs")
}